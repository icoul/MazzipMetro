<?xml version="1.0" encoding="UTF-8"?>
<!-- #11. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- #12. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) -->
<mapper namespace="user">

   <!-- 사용자 회원가입 -->
   <insert id="userRegister" parameterType="com.go.mazzipmetro.vo.UserVO">

      <!-- 프로필사진과 선호지역을 모두 선택하여 값을 넣어준 경우 -->
      <if test="userProfile != null and  userStation != null">
         insert into TBL_USER(userSeq, gradeSeq, userName, userEmail, userPw, userGender,
         userBirthDay, userPhone, userRegDate, userProfile, userPoint,
         userStation, userSort, userStatus)
         values(tbl_user_seq.nextval,
         <if test = "userSort == 0">
          default,
         </if>
         <if test = "userSort == 1">
          null,
         </if>
         #{userName}, #{userEmail}, #{userPw}, #{userGender},
         #{userBirthDay}, #{userPhone}, default, #{userProfile}, default ,
         #{userStation}, #{userSort}, default)
      </if>

      <!-- 프로필사진은 선택하지 않고 선호지역을 선택하여 값을 넣어준 경우 -->
      <if test="userProfile == null and userStation != null">
         insert into TBL_USER(userSeq, gradeSeq, userName, userEmail, userPw, userGender,
         userBirthday, userPhone, userRegDate, userPoint, userStation,
         userSort, userStatus)
         values(tbl_user_seq.nextval,
         <if test = "userSort == 0">
          default,
         </if>
         <if test = "userSort == 1">
         null,
         </if>
          #{userName}, #{userEmail}, #{userPw}, #{userGender},
         #{userBirthDay}, #{userPhone}, default, default , #{userStation},
         #{userSort}, default)
      </if>

      <!-- 프로필사진은 선택하고 선호지역을 선택하지 않은 경우 -->
      <if test="userProfile != null and userStation == null">
         insert into TBL_USER(userSeq, gradeSeq, userName, userEmail, userPw, userGender,
         userBirthDay, userPhone, userRegDate, userProfile, userPoint,
         userSort, userStatus)
         values(tbl_user_seq.nextval,
         <if test = "userSort == 0">
          default,
         </if>
         <if test = "userSort == 1">
         null,
         </if>
         #{userName}, #{userEmail}, #{userPw}, #{userGender},
         #{userBirthDay}, #{userPhone}, default, #{userProfile}, default ,
         #{userSort}, default)
         
         
      </if>

      <!-- 프로필사진과 선호지역을 모두 선택하지 않은 경우 -->
      <if test="userProfile == null and userStation == null">
         insert into TBL_USER(userSeq, gradeSeq, userName, userEmail, userPw,
         userGender, userBirthDay, userPhone, userRegDate, userPoint, userProfile,
         userSort, userStatus)
         values(tbl_user_seq.nextval,
         <if test = "userSort == 0">
          default,
         </if>
         <if test = "userSort == 1">
          null,
         </if>
         #{userName}, #{userEmail}, #{userPw}, #{userGender},
         #{userBirthDay}, #{userPhone}, default, default , default, #{userSort},
         default)
      </if>
   </insert>

   <!-- 로그인 체크 1:정상 로그인, 0:아이디 없음, -1: 계정자체가 없음 -->
   <select id="logincheck" resultType="int" parameterType="java.util.HashMap">
      SELECT CASE (SELECT COUNT(*)
      FROM tbl_User
      WHERE userStatus = 0 AND userEmail = #{userEmail} AND userPw = #{userPw})
      WHEN 1 THEN 1
      ELSE(CASE(SELECT COUNT(*) FROM tbl_User WHERE userStatus = 0 and userEmail =
      #{userEmail})
      WHEN 1 THEN 0
      ELSE -1 END)
      END AS loginCheck
      FROM dual
   </select>

   <select id="getLoginUser" resultType="com.go.mazzipmetro.vo.UserVO">
      select userSeq, a.gradeSeq, b.gradeName, userName, userEmail, userPw, userGender,
      userBirthday, userPhone, userRegDate
      ,userProfile, userPoint, userExp, userStation, userSort, userStatus
      from tbl_user a join tbl_grade b
      on a.gradeSeq = b.gradeSeq
      where userEmail = #{userEmail}
   </select>
   
   <update id="userEdit" parameterType="com.go.mazzipmetro.vo.UserVO">
      <!-- 프로필사진과 선호지역을 모두 선택하여 값을 넣어준 경우 -->
      <if test="userProfile != null and  userStation != null">
      update tbl_user 
      set userPw = #{userPw}, userPhone = #{userPhone}, userProfile = #{userProfile}, userStation = #{userStation}
      where userEmail = #{userEmail}
      </if>
      
      <!-- 프로필사진은 선택하지 않고 선호지역을 선택하여 값을 넣어준 경우 -->
      <if test="userProfile == null and userStation != null">
      update tbl_user 
      set userPw = #{userPw}, userPhone = #{userPhone}, userStation = #{userStation}
      where userEmail = #{userEmail}
      </if>
      
      <!-- 프로필사진은 선택하고 선호지역을 선택하지 않은 경우 -->
      <if test="userProfile != null and userStation == null">
      update tbl_user 
      set userPw = #{userPw}, userPhone = #{userPhone}, userProfile = #{userProfile}
      where userEmail = #{userEmail}
      </if>
      
      <!-- 프로필사진과 선호지역을 모두 선택하지 않은 경우 -->
      <if test="userProfile == null and userStation == null">
      update tbl_user 
      set userPw = #{userPw}, userPhone = #{userPhone}
      where userEmail = #{userEmail}
      </if>
   </update>
   
   <select id="userPoint" resultType="int">
      select userPoint
      from tbl_User
      where userSeq = #{userSeq}
   </select>
   
   <select id="restCount" resultType="int">
      select count(*)
      from tbl_restaurant
      where userSeq = #{userSeq}
   </select>
   
   <select id="userContent" resultType="int">
      select count(*)
      from tbl_restaurant_content
      where contentStatus = 0 and userSeq = #{userSeq}
   </select>
   
   <select id="userCoupon" resultType="int">
      select count(*)
      from tbl_coupon
      where couponStatus = 0 and userSeq = #{userSeq}
   </select>
   
   <select id="reviewCount" resultType="int">
      select distinct count(*)
      from tbl_review
      where reviewStatus = 0 and userSeq = #{userSeq}
   </select>
   
   <select id="qnaCount" resultType="int">
      select count(*)
      from tbl_qna
      where qnaProgress = '답변완료' and qnaStatus = 0 and userSeq = #{userSeq}
   </select>
   
   <select id="userExist" parameterType="String" resultType="int">
      select count(*)
      from tbl_user_attend
      where userSeq = #{userSeq} 
   </select>
   
   
   <!-- 동현_칭호 동이름, 지하철이름, 구이름을 구하기 -->
   <select id="getAliasIdName" parameterType="java.util.HashMap" resultType="String">
      select
      <if test="aliasType == 'dongId">
         dongName from tbl_dong where dongId = #{dongId}
      </if>
      <if test="aliasType == 'metroId">
         metroName from tbl_metro where metroId = #{metroId}
      </if>
      <if test="aliasType == 'guId">
         guName from tbl_gu where guId = #{guId}
      </if>
   </select>
   
   <!-- 칭호 존재여부 검사 -->
   <select id="isAliasExist" parameterType="java.util.HashMap" resultType="int">
      select count(*) from tbl_user_alias where userSeq = #{userSeq} and aliasId = #{aliasId}
   </select>
   
   <!-- 사용자의 칭호를 update한다. -->
   <update id="userAliasUpdate" parameterType="java.util.HashMap">
      update tbl_user_alias set aliasNum = aliasNum +1
      <if test="aliasName != null">
         , aliasName = #{aliasName}
      </if>
      where userSeq = #{userSeq} and aliasType = #{aliasType} and aliasId = #{aliasId}
   </update>
   
   <!-- 사용자의 칭호를 insert한다. -->
   <insert id="userAliasInsert" parameterType="java.util.HashMap">
      insert into tbl_user_alias(aliasSeq, userSeq, aliasType, aliasId)
      values(seq_tbl_user_alias.nextval, #{userSeq}, #{aliasType}, #{aliasId})
   </insert>
   
   <!-- 사용자 칭호 aliasId별로 해당 테이블 가져온다. -->
   <select id="getUserAlias" parameterType="java.util.HashMap" resultType="com.go.mazzipmetro.vo.UserAliasVO">
      select * from tbl_user_alias 
      where userSeq = #{userSeq} and aliasId = #{aliasId}
   </select>

<<<<<<< HEAD

=======
>>>>>>> 876f47a971b8754e3b959c1fdcaf4ff0cc35a8ac
   <resultMap type="java.util.HashMap" id="mapMyReviewList">
      <result column="reviewSeq" property="reviewSeq" javaType="String" />
      <result column="restName"  property="restName"  javaType="String" />
      <result column="reviewTitle"     property="reviewTitle"     javaType="String" />
      <result column="reviewContent" property="reviewContent" javaType="String" />
      <result column="reviewRegdate" property="reviewRegdate" javaType="String" />
   </resultMap>
   
   <select id="myReviewList" parameterType="String" resultMap="mapMyReviewList">
      select rno, reviewSeq, userSeq, restName, reviewTitle, reviewContent, reviewRegdate
      from
      (
      select rownum as rno, V.reviewSeq, V.userSeq, V.restName, V.reviewTitle, V.reviewContent, V.reviewRegdate
      from
      (
      select A.reviewSeq, A.userSeq , B.restName, A.reviewTitle,
      case when length(A.reviewContent) > 10 then substr (A.reviewContent, 1, 10) || '..' else A.reviewContent end as reviewContent, A.reviewRegdate
      from tbl_review A join tbl_restaurant B
      on A.restSeq = B.restSeq
      where reviewStatus = 0 and A.userSeq = #{userSeq}
      ) V
      ) T
      where rno <![CDATA[>=]]> #{start} and rno <![CDATA[<=]]> #{end}
   </select>
      
   <update id="reviewDelete">
      update tbl_review set reviewStatus = 1
      where reviewSeq = #{reviewSeq}
   </update>
   
   <select id="userReviewCount" parameterType="java.util.HashMap" resultType="int" >
      select count(*)
      from tbl_review
      where userSeq = #{userSeq} and reviewStatus = 0
   </select>
   
   <update id="userWithdrawal">
      update tbl_user set userStatus = 1
      where userSeq = #{userSeq}
   </update>
   
   <select id="getUserEmail" parameterType="java.util.HashMap" resultType="String">
      select userEmail from tbl_user
      where userStatus = 0 and userName = #{userName} and userPhone = #{userPhone} 
   </select>
   
   <select id="getUserExists" parameterType="java.util.HashMap" resultType="int">
      select count(*)
      from tbl_user
      where userStatus = 0 and userEmail = #{userEmail} and userPhone = #{userPhone}
   </select>
   
   <update id="updatePwdUser" parameterType="java.util.HashMap">
      update tbl_user set userPw = #{userPw}
      where userStatus = 0 and userEmail = #{userEmail} 
   </update>
   
   <!-- *************************************************은석22************************************************************ -->
   <!-- 1 -->
   <insert id="insertAttend" parameterType="String">
      insert into tbl_user_attend values(#{userSeq}, 1, 1, sysdate, default, default, default, default)
   </insert>
   
   <!-- 2 -->
   <update id="updateUserPointandExp" parameterType="java.util.HashMap">
      update tbl_user set userPoint =  userPoint + 
      <if test="type == '처음출석체크'">
         3,
      </if>
      
      <if test="type == '리뷰쓰기'">
         15,
      </if>
       
      userExp = userExp + 15 where userSeq = #{userSeq}
   </update>
   
   <!-- 3 -->
   <select id="userLoginToday" parameterType="String" resultType="int">
      select  count(*)
      from
      (
      select to_char(attendLastDay, 'yyyy-mm-dd hh24:mi:ss') as attendLastDay
      from tbl_user_attend
      where userSeq = #{userSeq}
      )V
      where V.attendLastDay between to_char(sysdate , 'YYYY-MM-DD ') || '00:00:00' and to_char(sysdate , 'YYYY-MM-DD ') || '23:59:59'
   </select>
   
   <!-- 4 -->
   <select id="getUserAttend" parameterType="String" resultType="com.go.mazzipmetro.vo.UserAttendVO">
      select userSeq, allAttendDay, continueAttendDay, to_char(attendLastDay + 9/24, 'yyyy-mm-dd hh24:mi:ss') as attendLastDay, userRandomBox, userPremiumRandomBox, alertUpgradeStatus, alertRandomBoxStatus
      from tbl_user_attend
      where userSeq = #{userSeq}
   </select>
   
   <!-- 5 -->
   <update id="updateUserAttend" parameterType="java.util.HashMap" >
      update tbl_user_attend set allAttendDay = allAttendDay + 1,
       
       <if test="continueCheck == 0">
       continueAttendDay = 1,
       </if>
       
        <if test="continueCheck == 1">
       continueAttendDay = continueAttendDay +1, 
       </if>
       attendLastDay = sysdate
       where userSeq = #{userSeq}
   </update>
   
   <!-- 6 -->
   <update id="updateUserPoint2" parameterType="java.util.HashMap">
      update tbl_user set 
      userPoint = userPoint +
      <if test="contineuAttendDay != 3 and contineuAttendDay != 7 and contineuAttendDay != 15 and contineuAttendDay != 20 ">
         3
      </if>
      
      <if test="contineuAttendDay == 3">
         10
      </if>
      <if test="contineuAttendDay == 7">
         30
      </if>
      <if test="contineuAttendDay == 15">
         50
      </if>
      <if test="contineuAttendDay == 20">
         70
      </if>
      , userExp = userExp + 15
       where userSeq = #{userSeq}
   </update>
   
   <!-- 7 -->
   <update id="updateRandomBox" parameterType="java.util.HashMap">
      
      <if test="contineuAttendDay != 14 and contineuAttendDay != 30">
         update tbl_user_attend set userRandomBox = userRandomBox where userSeq = #{userSeq}
      </if>
      <if test="contineuAttendDay == 14">
         update tbl_user_attend set 
         userRandomBox = userRandomBox + 1
         where userSeq = #{userSeq}
      </if>
      
      <if test="contineuAttendDay == 30">
         update tbl_user_attend set
         userPremiumRandomBox = userPremiumRandomBox + 1
         where userSeq = #{userSeq}
      </if>
      
   </update>
   
   <!-- 8 -->
   <select id="userLoginContinueCheck" parameterType="java.util.HashMap" resultType="int">
      select count(*)
      from tbl_user_attend
      where to_char(to_date(#{attendLastDay}, 'yyyy-mm-dd hh24:mi:ss'), 'yyyy-mm-dd hh24:mi:ss') between to_char(sysdate-1 , 'YYYY-MM-DD ') || '00:00:00' and to_char(sysdate-1 , 'YYYY-MM-DD ') || '23:59:59' and userSeq = #{userSeq}
   </select>
   
   <!-- 9 -->
   <update id="updateUserGrade" parameterType="java.util.HashMap">
      update tbl_user set gradeSeq = #{gradeSeq} where userSeq = #{userSeq}
   </update>
   
   <!-- 10 -->
   <select id="getUserGradeName" parameterType="String" resultType="String">
      select gradeName
      from tbl_grade
      where gradeSeq = #{gradeSeq}
   </select>
   
   <!-- 11 -->
   <select id="getUserGradeList" resultType="com.go.mazzipmetro.vo.GradeVO">
      select gradeSeq, gradeName, gradeExp, gradeReviewNum, gradeScore
      from tbl_grade
      where gradeSeq like 'UG%'
   </select>
   
   <!-- 12 -->
   <select id="getUserAliasCount" parameterType="java.util.HashMap" resultType="int">
      select count(*)
      from tbl_user_alias
      where userSeq = #{userSeq} and aliasType = #{aliasType} and aliasName = '마스터'
   </select>   
      
   <!-- 13 -->
   <update id="updateUserPoint" parameterType="java.util.HashMap">
      
      update tbl_user set userPoint = userPoint 
      <if test="gradeSeq == 'UG6'">
         - 1500
      </if>
      
      <if test="gradeSeq == 'UG7'">
         - 3000
      </if> 
   </update>   
   
   <!-- 14 -->
   <update id="updateAlertUpgradeStatus" parameterType="java.util.HashMap">
      update tbl_user_attend set alertUpgradeStatus = #{alertUpgradeStatus} where userSeq = #{userSeq}
   </update>
   
   <!-- 15 -->
   <update id="updateAlertRandomBoxStatus" parameterType="java.util.HashMap">
      update tbl_user_attend set alertRandomBoxStatus = 0 where userSeq = #{userSeq}
   </update>
   
   <!-- 16 -->
   <update id="minusRandomBox" parameterType="java.util.HashMap">
      update tbl_user_attend set 
      <if test="boxType == 'random'">
         userRandomBox = userRandomBox - 1
      </if>
      
      <if test="boxType == 'premium'">
         userPremiumRandomBox = userPremiumRandomBox - 1
      </if>
      where userSeq = #{userSeq}
   </update>
   
   <resultMap type="java.util.HashMap" id="getUserGuAliasList">
      <result column="aliasSeq" property="aliasSeq" javaType="String" />
      <result column="userSeq"  property="userSeq"  javaType="String" />
      <result column="aliasType"     property="aliasType"     javaType="String" />
      <result column="aliasId" property="aliasId" javaType="String" />
      <result column="guName" property="guName" javaType="String" />
      <result column="aliasName" property="aliasName" javaType="String" />
      <result column="aliasNum" property="aliasNum" javaType="String" />
   </resultMap>
   
   <!-- 17 -->
   <select id="getUserGuAliasList" parameterType="java.util.HashMap" resultMap="getUserGuAliasList">
         select aliasSeq, userSeq, aliasType, aliasId, guName, aliasName, aliasNum 
         from tbl_user_alias a join tbl_gu b
         on a.aliasId = b.guId
         where userSeq = #{userSeq} and aliasStatus = 0
         order by aliasSeq
   </select>
   
   
   <resultMap type="java.util.HashMap" id="getUserDongAliasList">
      <result column="aliasSeq" property="aliasSeq" javaType="String" />
      <result column="userSeq"  property="userSeq"  javaType="String" />
      <result column="aliasType"     property="aliasType"     javaType="String" />
      <result column="aliasId" property="aliasId" javaType="String" />
      <result column="dongName" property="dongName" javaType="String" />
      <result column="aliasName" property="aliasName" javaType="String" />
      <result column="aliasNum" property="aliasNum" javaType="String" />
   </resultMap>
   
   <!-- 18 -->
   <select id="getUserDongAliasList" parameterType="java.util.HashMap" resultMap="getUserDongAliasList">
      select aliasSeq, userSeq, aliasType, aliasId, dongName, aliasName, aliasNum
         from tbl_user_alias a join tbl_dong b
         on a.aliasId = b.dongId
         where userSeq = #{userSeq} and aliasStatus = 0
         order by aliasSeq
   </select>
   
   <resultMap type="java.util.HashMap" id="getUserMetroAliasList">
      <result column="aliasSeq" property="aliasSeq" javaType="String" />
      <result column="userSeq"  property="userSeq"  javaType="String" />
      <result column="aliasType"     property="aliasType"     javaType="String" />
      <result column="aliasId" property="aliasId" javaType="String" />
      <result column="metroName" property="metroName" javaType="String" />
      <result column="aliasName" property="aliasName" javaType="String" />
      <result column="aliasNum" property="aliasNum" javaType="String" />
   </resultMap>
   
   <!-- 19 -->
   <select id="getUserMetroAliasList" parameterType="java.util.HashMap" resultMap="getUserMetroAliasList">
         select aliasSeq, userSeq, aliasType, aliasId, metroName, aliasName, aliasNum
         from tbl_user_alias a join tbl_metro b
         on a.aliasId = b.metroId
         where userSeq = #{userSeq} and aliasStatus = 0
         order by aliasSeq
   </select>
   
   
   <resultMap type="java.util.HashMap" id="getUserRestTagAliasList">
      <result column="aliasSeq" property="aliasSeq" javaType="String" />
      <result column="userSeq"  property="userSeq"  javaType="String" />
      <result column="aliasType"     property="aliasType"     javaType="String" />
      <result column="aliasId" property="aliasId" javaType="String" />
      <result column="aliasName" property="aliasName" javaType="String" />
      <result column="aliasNum" property="aliasNum" javaType="String" />
   </resultMap>
   
   <!-- 20 -->
   <select id="getUserRestTagAliasList" parameterType="java.util.HashMap" resultMap="getUserRestTagAliasList">
         select aliasSeq, userSeq, aliasType, aliasId, aliasName, aliasNum
         from tbl_user_alias
         where userSeq = #{userSeq} and aliasStatus = 0 and aliastype like 'rest%'
         order by aliasSeq
   </select>
   
   <!-- 21 -->
   <select id="getLoginUserByUserSeq" resultType="com.go.mazzipmetro.vo.UserVO">
      select userSeq, a.gradeSeq, b.gradeName, userName, userEmail, userPw, userGender,
      userBirthday, userPhone, userRegDate
      ,userProfile, userPoint, userExp, userStation, userSort, userStatus
      from tbl_user a join tbl_grade b
      on a.gradeSeq = b.gradeSeq
      where userSeq = #{userSeq}
   </select>
   
   <!-- 22 -->
   <update id="minusUserPoint" parameterType="java.util.HashMap">
      update tbl_user set userPoint = userPoint 
      <if test="boxType == 'random'">
         - 20
      </if>
      
      <if test="boxType == 'premium'">
         - 50
      </if>
      where userSeq = #{userSeq} 
   </update>
   <!-- *************************************************은석22************************************************************ -->

</mapper>
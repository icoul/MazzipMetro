<?xml version="1.0" encoding="UTF-8"?>
<!-- #11. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- #12. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) --> 
<mapper namespace="ranking">
	<!-- 지하철 데이터를 가져오는 SQL문 -->
	<resultMap type="java.util.HashMap" id="getMetro">
		 <result column="metroId"	  	        property="metroId" 			    	javaType="String" />
		 <result column="metroName"	  	    	property="metroName" 			    javaType="String" />
	</resultMap>
	<select id = "ranking.getMetro" resultMap = "getMetro">
		select metroId, metroName
		from TBL_Metro
	</select>
	
	<!-- 동 데이터를 가져오는 SQL문 -->
	<resultMap type="java.util.HashMap" id="getDong">
		 <result column="dongId"	  	        property="dongId" 			    	javaType="String" />
		 <result column="dongName"	  	    	property="dongName" 			    javaType="String" />
	</resultMap>
	<select id = "ranking.getDong" resultMap = "getDong">
		select dongId, dongName
		from TBL_Dong
	</select>
	
	<!-- 지하철 데이터를 가져오는 SQL문 (검색단어 존재) -->
	<select id = "ranking.searchMetroName" parameterType="String" resultMap = "getMetro">
		select metroId, metroName
		from TBL_Metro
		where metroName like '%' || #{metroName} || '%'
	</select>
	
	<!-- 동 데이터를 가져오는 SQL문 (검색단어 존재) -->
	<select id = "ranking.searchDongName" parameterType="String" resultMap = "getDong">
		select dongId, dongName
		from TBL_Dong
		where dongName like '%' || #{dongName} || '%'
	</select>
	
	<!-- 총 갯수를 가져오는 SQL문 -->
	<!-- 날짜 구분 없음 -->
	<select id = "ranking.getNotDateTotalNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      group by restseq
		      )F  
		on T.restSeq = F.restSeq
        where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
	</select>
	
	<!-- 1주일 -->
	<select id = "ranking.getOneWeekTotalNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		       where reviewregdate > (sysdate - 7)
		      group by restseq
		      )F  
		on T.restSeq = F.restSeq
        where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
	</select>
	
	<!-- 1달 -->
	<select id = "ranking.getOneMonthTotalNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      where restRegDate > (sysdate - 30)
		      group by restseq
		      )F  
		on T.restSeq = F.restSeq
        where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
	</select>
	
	<!-- 3달 -->
	<select id = "ranking.getThreeMonthTotalNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      where restRegDate > (sysdate - 90)
		      group by restseq
		      )F  
		on T.restSeq = F.restSeq
        where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
	</select>
	
	<!-- 1년 -->
	<select id = "ranking.ggetOneYearTotalNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      where restRegDate > (sysdate - 365)
		      group by restseq
		      )F  
		on T.restSeq = F.restSeq
        where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
	</select>

	<!-- 총 갯수를 가져오는 SQL문 -->
	<!-- 날짜 구분 없음 -->
	<select id = "ranking.getNotDateTotalReviewNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where 1=1 and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V
	</select>
	
	<!-- 일주일 -->
	<select id = "ranking.getOneWeekTotalReviewNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where E.reviewRegDate > (sysdate - 7) and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V
	</select>
	
	<!-- 한 달 -->
	<select id = "ranking.getOneMonthTotalReviewNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where E.reviewRegDate > (sysdate - 30) and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V
	</select>
	
	<!-- 세 달 -->
	<select id = "ranking.getThreeMonthTotalReviewNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where E.reviewRegDate > (sysdate - 90) and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V
	</select>
	
	<!-- 일 년 -->
	<select id = "ranking.getOneYearTotalReviewNum" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where E.reviewRegDate > (sysdate - 365) and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V
	</select>
	<!-- ============================================================================================== -->
	<resultMap type="java.util.HashMap" id="restRanking">
		 <result column="restSeq"	  	        property="restSeq" 			    	javaType="String" />
		 <result column="restName"	  	    	property="restName" 			    javaType="String" />
		 <result column="restAddr"	  	        property="restAddr" 			    javaType="String" />
		 <result column="restNewAddr"	  		property="restNewAddr" 				javaType="String" />
		 <result column="restPhone"	  	    	property="restPhone" 			    javaType="String" />
		 <result column="restImg"	  	    	property="restImg" 			    	javaType="String" />
		 <result column="metroName"	  	        property="metroName" 			    javaType="String" />
		 <result column="dongName"	  	    	property="dongName" 			    javaType="String" />
		 <result column="restRegDate"	  	    property="restRegDate" 				javaType="String" />
		 <result column="restBgTag"	  	    	property="restBgTag" 				javaType="String" />
		 <result column="restMdTag"	  	    	property="restMdTag" 				javaType="String" />
		 <result column="rank"	  	    		property="rank" 					javaType="String" />
		 <result column="reviewAvgScore"	  	property="reviewAvgScore" 			javaType="String" />
		 <result column="count"	  	    		property="count" 					javaType="String" />
		 <result column="score"	  	    		property="score" 					javaType="String" />
		 <result column="restContent"			property="restContent"				javaType="String" />
	</resultMap>
	<!-- 기간 상관없이 랭킹 -->
	<select id = "ranking.getNotDateRestRanking" parameterType="java.util.HashMap" resultMap="restRanking" >
		select F.*
		from
		(
		select row_number() over(order by  reviewavgscore*count desc) as rank, V.*
		from
		(
		select T.*, M.metroName, D.dongName, nvl(round(F.reviewavgscore, 1), 0) as reviewavgscore, nvl(F.count,0) as count, nvl(round(F.reviewavgscore*F.count, 1),0) as score
				from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      group by restseq
		      )F  
				on T.restSeq = F.restSeq
		    join TBL_metro M
		    on T.metroId = M.metroId
		    join TBL_Dong D
		    on T.dongId = D.dongId
		)V
		where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
		)F
		where rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>
	
	<!-- 최근 일주일 랭킹 -->	
	<select id = "ranking.getOneWeekRestRanking" parameterType="java.util.HashMap" resultMap="restRanking" >
		select F.*
		from
		(
		select row_number() over(order by  reviewavgscore*count desc) as rank, V.*
		from
		(
		select T.*, M.metroName, D.dongName, nvl(round(F.reviewavgscore, 1), 0) as reviewavgscore, nvl(F.count,0) as count, nvl(round(F.reviewavgscore*F.count, 1),0) as score
				from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      where reviewregdate > (sysdate - 7)
		      group by restseq
		      )F  
				on T.restSeq = F.restSeq
		    join TBL_metro M
		    on T.metroId = M.metroId
		    join TBL_Dong D
		    on T.dongId = D.dongId
		)V
		where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
		)F
		where rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>

	<!-- 최근 한 달 랭킹 -->	
	<select id = "ranking.getOneMonthRestRanking" parameterType="java.util.HashMap" resultMap="restRanking" >
		select F.*
		from
		(
		select row_number() over(order by  reviewavgscore*count desc) as rank, V.*
		from
		(
		select T.*, M.metroName, D.dongName, nvl(round(F.reviewavgscore, 1), 0) as reviewavgscore, nvl(F.count,0) as count, nvl(round(F.reviewavgscore*F.count, 1),0) as score
				from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      where restRegDate > (sysdate - 30)
		      group by restseq
		      )F  
				on T.restSeq = F.restSeq
		    join TBL_metro M
		    on T.metroId = M.metroId
		    join TBL_Dong D
		    on T.dongId = D.dongId
		)V
		where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
		)F
		where rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>

	<!-- 최근 3달 랭킹 -->	
	<select id = "ranking.getThreeMonthRestRanking" parameterType="java.util.HashMap" resultMap="restRanking" >
		select F.*
		from
		(
		select row_number() over(order by  reviewavgscore*count desc) as rank, V.*
		from
		(
		select T.*, M.metroName, D.dongName, nvl(round(F.reviewavgscore, 1), 0) as reviewavgscore, nvl(F.count,0) as count, nvl(round(F.reviewavgscore*F.count, 1),0) as score
				from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      where restRegDate > (sysdate - 90)
		      group by restseq
		      )F  
				on T.restSeq = F.restSeq
		    join TBL_metro M
		    on T.metroId = M.metroId
		    join TBL_Dong D
		    on T.dongId = D.dongId
		)V
		where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
		)F
		where rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>

	<!-- 최근 1년 랭킹 -->	
	<select id = "ranking.getOneYearRestRanking" parameterType="java.util.HashMap" resultMap="restRanking" >
		select F.*
		from
		(
		select row_number() over(order by  reviewavgscore*count desc) as rank, V.*
		from
		(
		select T.*, M.metroName, D.dongName, nvl(round(F.reviewavgscore, 1), 0) as reviewavgscore, nvl(F.count,0) as count, nvl(round(F.reviewavgscore*F.count, 1),0) as score
				from TBL_restaurant T left join
		      (
		      select restseq, avg(reviewavgscore) as reviewavgscore, count(*) as count
		      from TBL_Review
		      where restRegDate > (sysdate - 365)
		      group by restseq
		      )F  
				on T.restSeq = F.restSeq
		    join TBL_metro M
		    on T.metroId = M.metroId
		    join TBL_Dong D
		    on T.dongId = D.dongId
		)V
		where 1=1
			<foreach collection="optionList" item="option">
				and ${option.parameter} like '%' || #{option.value} || '%' 
			</foreach>
		)F
		where rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>
	
	<!-- ==================================================================================================== -->
	
	<!-- 리뷰 랭킹 받아오기 -->
	<resultMap type="java.util.HashMap" id="reviewRanking">
		 <result column="rank"	  	        property="rank" 			    	javaType="String" />
		 <result column="userSeq"	  	    property="userSeq" 			    	javaType="String" />
		 <result column="userEmail"	  	    property="userEmail" 			    javaType="String" />
		 <result column="userName"	  		property="userName" 				javaType="String" />
		 <result column="gradeName"	  	    property="gradeName" 			    javaType="String" />
		 <result column="userProfile"	  	property="userProfile" 			    javaType="String" />
	</resultMap>
	
	<!-- 기간 관계없이 -->	
	<select id = "ranking.getNotDateReviewRanking" parameterType="java.util.HashMap" resultMap="reviewRanking" >
		select W.*
		from
		(
		select row_number() over(order by userScore desc) as rank, T.* 
		from 
		(
		select max(U.userSeq) as userSeq, max(U.useremail) as userEmail, max(U.userName) as userName, max(G.gradeName) as gradeName
			 , max(U.userProfile) as userProfile
			 , sum(case when A.aliasName = '마스터' then 10000
		       when A.aliasName = '숙련자' then 100
		       else 1 end) * max(V.counter) as userScore
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where 1=1 and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V join tbl_user U
				on V.userSeq = U.userSeq
			 join tbl_grade G
				on U.gradeSeq = G.gradeSeq
			 join TBL_User_Alias A
				on U.userSeq = A.userSeq
		where userStatus = 0
		group by U.userSeq
		)T
		)W
		where  rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>
	
	<!-- 최근 일주일의 리뷰를 기준으로 -->	
	<select id = "ranking.getOneWeekReviewRanking" parameterType="java.util.HashMap" resultMap="reviewRanking" >
		select W.*
		from
		(
		select row_number() over(order by userScore desc) as rank, T.* 
		from 
		(
		select max(U.userSeq) as userSeq, max(U.useremail) as userEmail, max(U.userName) as userName, max(G.gradeName) as gradeName
			 , max(U.userProfile) as userProfile
			 , sum(case when A.aliasName = '마스터' then 10000
		       when A.aliasName = '숙련자' then 100
		       else 1 end) * max(V.counter) as userScore
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where E.reviewRegDate > (sysdate - 7) and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V join tbl_user U
				on V.userSeq = U.userSeq
			 join tbl_grade G
				on U.gradeSeq = G.gradeSeq
			 join TBL_User_Alias A
				on U.userSeq = A.userSeq
		where userStatus = 0
		group by U.userSeq
		)T
		)W
		where  rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>
	
	<!-- 최근 한 달의 리뷰를 기준으로 -->
	<select id = "ranking.getOneMonthReviewRanking" parameterType="java.util.HashMap" resultMap="reviewRanking" >
		select W.*
		from
		(
		select row_number() over(order by userScore desc) as rank, T.* 
		from 
		(
		select max(U.userSeq) as userSeq, max(U.useremail) as userEmail, max(U.userName) as userName, max(G.gradeName) as gradeName
			 , max(U.userProfile) as userProfile
			 , sum(case when A.aliasName = '마스터' then 10000
		       when A.aliasName = '숙련자' then 100
		       else 1 end) * max(V.counter) as userScore
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where E.reviewRegDate > (sysdate - 30) and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V join tbl_user U
				on V.userSeq = U.userSeq
			 join tbl_grade G
				on U.gradeSeq = G.gradeSeq
			 join TBL_User_Alias A
				on U.userSeq = A.userSeq
		where userStatus = 0
		group by U.userSeq
		)T
		)W
		where  rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>
	
	<!-- 최근 세 달의 리뷰를 기준으로 -->
	<select id = "ranking.getThreeMonthReviewRanking" parameterType="java.util.HashMap" resultMap="reviewRanking" >
		select W.*
		from
		(
		select row_number() over(order by userScore desc) as rank, T.* 
		from 
		(
		select max(U.userSeq) as userSeq, max(U.useremail) as userEmail, max(U.userName) as userName, max(G.gradeName) as gradeName
			 , max(U.userProfile) as userProfile
			 , sum(case when A.aliasName = '마스터' then 10000
		       when A.aliasName = '숙련자' then 100
		       else 1 end) * max(V.counter) as userScore
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where E.reviewRegDate > (sysdate - 90) and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V join tbl_user U
				on V.userSeq = U.userSeq
			 join tbl_grade G
				on U.gradeSeq = G.gradeSeq
			 join TBL_User_Alias A
				on U.userSeq = A.userSeq
		where userStatus = 0
		group by U.userSeq
		)T
		)W
		where  rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>
	
	<!-- 최근 일 년의 리뷰를 기준으로 -->
	<select id = "ranking.getOneYearReviewRanking" parameterType="java.util.HashMap" resultMap="reviewRanking" >
		select W.*
		from
		(
		select row_number() over(order by userScore desc) as rank, T.* 
		from 
		(
		select max(U.userSeq) as userSeq, max(U.useremail) as userEmail, max(U.userName) as userName, max(G.gradeName) as gradeName
			 , max(U.userProfile) as userProfile
			 , sum(case when A.aliasName = '마스터' then 10000
		       when A.aliasName = '숙련자' then 100
		       else 1 end) * max(V.counter) as userScore
		from
		  (
		    select E.userSeq, count(E.reviewSeq) as counter
		    from tbl_review E 
		         join tbl_restaurant R
		            on E.restSeq = R.restSeq
		         join tbl_metro M
		            on R.metroId = M.metroId
		         join tbl_dong D
		            on R.dongId = D.dongId
		    where E.reviewRegDate > (sysdate - 365) and E.reviewStatus = 0
		    	  <foreach collection="optionList" item="option">
					 and ${option.parameter} like '%' || #{option.value} || '%' 
				  </foreach>         
		    group by E.userseq
		  )V join tbl_user U
				on V.userSeq = U.userSeq
			 join tbl_grade G
				on U.gradeSeq = G.gradeSeq
			 join TBL_User_Alias A
				on U.userSeq = A.userSeq
		where userStatus = 0
		group by U.userSeq
		)T
		)W
		where  rank <![CDATA[>=]]> #{rankStartNum} and rank <![CDATA[<=]]> #{rankEndNum}
	</select>
	
	
	<!-- 인덱스 페이지 탑랭크 리뷰어가 추천한 맛집 이 곳의 맛집번호를 가져오는 메서드 -->
	<resultMap type="java.util.HashMap" id="Top5ScoreRest">
		<result column="restSeq"	  	    property="restSeq" 			    	javaType="String" />
		<result column="reviewSeq"	  	    property="reviewSeq" 			    javaType="String" />
	</resultMap>
	
	<select id = "ranking.getTop5ScoreRest" parameterType="String" resultMap="Top5ScoreRest">
		select T.restSeq, T.reviewseq
		from
		(
		select V.restSeq, V.reviewseq
		from 
		    (   
		      select rownum as rno, restSeq, reviewseq
		      from TBL_review
		      where userSeq = #{userSeq}
		      order by reviewavgscore desc
		    )V
		where rno between 1 and 1
		order by dbms_random.value
		)T
		where rownum = 1
	</select>
	
	<select id="ranking.getRestInfo" parameterType="java.util.HashMap" resultType="com.go.mazzipmetro.vo.RestaurantVO">
		select *
		from tbl_restaurant
		where restSeq = #{restSeq}
	</select>
	
	<select id="ranking.getReviewInfo" parameterType="java.util.HashMap" resultType="com.go.mazzipmetro.vo.ReviewVO">
		select *
		from tbl_review
		where reviewSeq = #{reviewSeq}
	</select>
	
	<select id="ranking.getUserInfo" parameterType="java.util.HashMap" resultType="com.go.mazzipmetro.vo.UserVO">
		select *
		from tbl_user
		where userSeq = #{userSeq}
	</select>
</mapper>
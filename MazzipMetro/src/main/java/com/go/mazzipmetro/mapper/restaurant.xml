<?xml version="1.0" encoding="UTF-8"?>
<!-- #11. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- #12. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) --> 
<mapper namespace="restaurant">

	<!-- 관리자용 업장 수정 요청(update) -->
	<update id="adminRestEditEnd" parameterType="com.go.mazzipmetro.vo.RestaurantVO" >
		update tbl_restaurant set
		<if test="restStatus == 0">
			restName = #{restName}, userSeq = #{userSeq}, gradeSeq = #{gradeSeq}
		  , restAddr = #{restAddr}, restNewAddr = #{restNewAddr}, restPhone = #{restPhone}
		  , restLatitude = #{restLatitude}, restLongitude = #{ restLongitude}
		  , restContent = #{restContent}, dongId = #{dongId}, metroId = #{metroId} 
		  <if test="restImg != null">
		  	, restImg = #{restImg}
		  </if>
		</if>
	  	<if test="restStatus == 1">
	  		restStatus = 1
	  	</if>
		where restSeq = #{restSeq}
	</update>
	
	
	<!-- 관리자용 업장 소개 이미지 삭제 -->
	<update id="delRestAd" parameterType="java.util.HashMap">
		update tbl_restaurant_ad set adImgStatus = 1
		where restSeq = #{restSeq} and adImg = #{adImg}
	</update>
	
	<!-- 관리자용 업장 소개 이미지 추가 -->
	<insert id="insertRestAd" parameterType="java.util.HashMap">
		insert into tbl_restaurant_ad values(#{restSeq}, #{adImg}, default)
	</insert>
	
	
	<!-- 관리자용 업장수정을 위한 하나의  업장 등급 리스트 가져오기 -->
	<resultMap type="java.util.HashMap" id="resultRestGradeList">
		 <result column="gradeSeq"	  	        property="gradeSeq" 			    	javaType="String" />
		 <result column="gradeName"	  	    property="gradeName" 			    javaType="String" />
	 </resultMap>
	<select id="restGradeList" resultMap="resultRestGradeList">
		select * from tbl_grade where gradeSeq like 'RG%'
	</select>

	<!-- 관리자용 업장수정을 위한 하나의 RestaurantVO 가져오기 -->
	<select id="adminRestEditInfo" parameterType="String" resultType="com.go.mazzipmetro.vo.RestaurantVO">
		select A.*, B.guName
		from(
		select A.*, B.dongName, B.guId
		from(
		select A.*, B.metroName
		from(
		select A.*, B.gradeName
		from tbl_restaurant A left join tbl_grade B 
		on A.gradeSeq = B.gradeSeq
		where A.restSeq = #{restSeq}) A left join tbl_metro B
		on A.metroId = B.metroId) A left join tbl_dong B
		on A.dongId = B.dongId ) A left join tbl_gu B
		on A.guId = B.guId
	</select>
	
	<!-- 임시_업장 restSeq 가져오기(태그가 있는 행만 가져오기) -->
	<!-- <select id="temp_getRestSeqForTags" resultType="String">
		select distinct(restSeq) from tbl_restaurant_tag
	</select> -->
	
	<!-- 관리자용 업장 수정 요청 (AdImg 이름 요청) -->
	<select id="adminRestAdImgInfo" parameterType="String" resultType="String">
		select adImg from tbl_restaurant_ad where restSeq = #{restSeq} and adImgStatus = 0
	</select>
	
	<!-- restSeq로 하나의 업장을 가져오기 -->
	<resultMap type="java.util.HashMap" id="dataresultmap1">
		 <result column="restseq"	  	        property="restseq" 			    	javaType="String" />
		 <result column="restname"	  	    	property="restname" 			    javaType="String" />
		 <result column="userseq"	  	        property="userseq" 			    	javaType="String" />
		 <result column="gradeseq"	  	    	property="gradeseq" 			    javaType="String" />
		 <result column="restaddr"	  	        property="restaddr" 			    javaType="String" />
		 <result column="restnewaddr"	  		property="restnewaddr" 				javaType="String" />
		 <result column="restphone"	  	   	 	property="restphone" 			    javaType="String" />
		 <result column="restlatitude"	  	    property="restlatitude" 			javaType="String" />
		 <result column="restlongitude"	  		property="restlongitude" 			javaType="String" />
		 <result column="restzindex"	  	    property="restzindex" 			    javaType="String" />
		 <result column="metroid"	  	        property="metroid" 			    	javaType="String" />
		 <result column="dongid"	  	    	property="dongid" 			    	javaType="String" />
		 <result column="restregdate"	  	    property="restregdate" 				javaType="String" />
		 <result column="restbgtag"	  	    	property="restbgtag" 				javaType="String" />
		 <result column="restmdtag"	  	    	property="restmdtag" 				javaType="String" />
		 <result column="restimg"	  	    	property="restimg" 					javaType="String" />
		 <result column="shortaddr"	  	    	property="shortaddr" 				javaType="String" />

		 <!-- 동현 추가 -->
		 <result column="restimg"	  	    property="restImg" 			javaType="String" />
	</resultMap>

	<select id="getRestaurant" parameterType="String" resultMap="dataresultmap1">
		select restseq, restname, userseq, gradeseq, restaddr, substr(restaddr, 4, 7) as shortaddr, restnewaddr, restphone, restlatitude, restlongitude, 
			   restzindex, metroid, dongid, to_char(restregdate, 'yyyy-mm-dd') as restregdate, restbgtag, restmdtag, restimg 
		from TBL_RESTAURANT
		where restseq = #{restseq} and reststatus = 0
	</select>
	
	<!-- 검색시 자동글완성 기능 구현 -->
	<select id="autoComplete"  parameterType="java.util.HashMap" resultType="String">
		<if test='srchType.equals("restName")'>
			select distinct(restName)
			from tbl_restaurant
			where restName like '%'||#{keyword}||'%'
		</if>
			
		<if test='srchType.equals("metroName")'>
			select distinct(metroName)
			from tbl_metro
			where metroName like '%'||#{keyword}||'%'
		</if>
			
		<if test='srchType.equals("dongName")'>
			select distinct(dongName)
			from tbl_dong
			where dongName like '%'||#{keyword}||'%'
		</if>
		
		<if test='srchType.equals("guName")'>
			select distinct(guName)
			from tbl_gu
			where guName like '%'||#{keyword}||'%'
		</if>
	</select>
	
	<!-- 검색 자동글완성 (카테고리) 기능 구현 -->
	<select id="r_catAutoComplete"  parameterType="String" resultType="String">
		select distinct(restName)
		from tbl_restaurant
		where restStatus = 0 and restName like '%'||#{keyword}||'%'
	</select>
	<select id="m_catAutoComplete"  parameterType="String" resultType="String">
		select distinct(metroName)
		from tbl_metro
		where metroName like '%'||#{keyword}||'%'
	</select>
	<select id="d_catAutoComplete"  parameterType="String" resultType="String">
		select distinct(dongName)
		from tbl_dong
		where dongName like '%'||#{keyword}||'%'
	</select>
	<select id="g_catAutoComplete"  parameterType="String" resultType="String">
		select distinct(guName)
		from tbl_gu
		where guName like '%'||#{keyword}||'%'
	</select>
	
	
	<!-- 업장이름 리스트 가져오기 -->
	<select id="restaurant.getRestName" parameterType="String" resultType="com.go.mazzipmetro.vo.RestaurantVO">
		select restSeq,  userSeq,  gradeSeq,  restName,  restPhone,
			   restImg,  restAddr,  restNewAddr,  restLatitude,  restLongitude,
			   restZIndex,  dongId,  metroId,  restRegDate,  restVisitor, restStatus
		from TBL_Restaurant
		where restName like '%' || #{name} || '%'
	</select>
	
	<!-- 사업주의  리스트 가져오기 -->
	<select id="getRestrauntList" parameterType="String" resultType="com.go.mazzipmetro.vo.RestaurantVO">
		select restSeq,  userSeq,  gradeSeq,  restName,  restPhone,
			   restImg,  restAddr,  restNewAddr,  restLatitude,  restLongitude,
			   restZIndex,  dongId,  metroId,  restRegDate,  restVisitor, restStatus, restContent
		from TBL_Restaurant
		where userseq = #{userseq} and restStatus = 0
	</select>
	
	<!-- 새 업장 등록 -->
	<insert id="restaurant.setRestRegister" parameterType="com.go.mazzipmetro.vo.RestaurantVO">
		insert into TBL_Restaurant values(TBL_Restaurant_Seq.nextval, #{userSeq}, default, #{restName}
										, #{restPhone}, 
										<if test="restImg == null or restImg.equals('')">
											default
										</if>
										<if test="restImg != null and !restImg.equals('')">
											#{restImg}
										</if>
										, #{restAddr}, #{restNewAddr}
										, #{restLatitude}, #{restLongitude}, TBL_Restaurant_Seq.nextval
										, #{dongId}, #{metroId}, default, 0, default, null, #{restBgTag}, #{restMdTag})
	</insert>
	
	<!-- 기존 업장 업데이트 -->
	<update id="restaurant.setRestUpdate" parameterType="com.go.mazzipmetro.vo.RestaurantVO">
		update TBL_Restaurant set userSeq = #{userSeq}, restImg = 
										<if test="restImg == null or restImg.equals('')">
											default
										</if>
										<if test="restImg != null and !restImg.equals('')">
											#{restImg}
										</if>
										, restPhone = #{restPhone}, restRegDate = sysdate
		where restSeq = #{restSeq}
	</update>
	
	<!-- 업장을 새로 등록했기 때문에 Seq번호를 새로 가져오기 위함. -->
	<select id = "restaurant.getNewRestSeq" parameterType="String" resultType="String">
		select max(restSeq)
		from TBL_Restaurant
		where userseq = #{userSeq}
	</select>
	
	<!-- 업장 소개글 추가 -->
	<update id="restaurant.setRestContent" parameterType="java.util.HashMap">
		update TBL_Restaurant set restContent = #{restContent}
		where restSeq = #{restSeq}
	</update>
	
	<!-- 업장 이미지 추가 -->
	<insert id="restaurant.setRestImg" parameterType="java.util.HashMap">
		insert into TBL_Restaurant_Ad values(#{restSeq}, #{AdImg}, 0)
	</insert>
	
	<!-- 메뉴 추가 -->
	<insert id="restaurant.setMenu" parameterType="java.util.HashMap">
		insert into TBL_Restaurant_Menu(menuSeq, restSeq, menuName, menuContent, menuImg, menuPrice, menuSalePrice, menuSort, menuEvent, menuStatus) 
		values(TBL_Restaurant_menuSeq.nextval, #{restSeq}, '${menuName}', #{menuContent}, 
			<if test="menuImg == null or menuImg.equals('')">
				default
			</if>
			<if test="menuImg != null and !menuImg.equals('')">
				#{menuImg}
			</if>
		, #{menuPrice}, #{menuSalePrice}, #{menuSort}, 
			<if test="menuEvent == null or menuEvent.equals('')">
				default
			</if>
			<if test="menuEvent != null and !menuEvent.equals('')">
				#{menuEvent}
			</if>
		, default)
	</insert>
	
	<!-- 업장 리스트를 위한 정보 가져오기 -->
	<select id="restaurant.getRestrauntEditList" parameterType="String" resultType="com.go.mazzipmetro.vo.RestaurantVO">
		select R.restSeq,  R.userSeq, G.gradeName as gradeSeq,  R.restName,  R.restPhone,
			   R.restImg,  R.restAddr,  R.restNewAddr,  R.restLatitude,  R.restLongitude,
			   R.restZIndex,  R.dongId,  R.metroId,  to_char(R.restRegDate, 'yyyy-mm-dd') as restRegDate,  R.restVisitor, R.restStatus, R.restContent
		from 
		TBL_Restaurant R join TBL_Grade G
		on R.gradeSeq = G.gradeSeq
		where userseq = #{userSeq} and restStatus = 0
	</select>
	
	<!-- 업장삭제 SQL문 -->
	<select id="restaurant.delRest" parameterType="java.util.HashMap" >
		update TBL_Restaurant set restStatus = 1
		where userSeq = #{userSeq} and restSeq = #{restSeq}
	</select>
	
	<!-- 지하철 역명 가져오기 -->
	<select id="restaurant.getMetro" resultType="String">
		select metroId
		from TBL_Metro
	</select>
	
	<!-- 사업자 매장 통계 (매장리스트) -->
	<select id="restListStatistics" parameterType="String" resultType="com.go.mazzipmetro.vo.RestaurantVO">
		select A.restSeq, A.restname, A.restimg, A.restaddr, B.metroname, A.restregdate
		from tbl_restaurant A join tbl_metro B
		on A.metroid = B.metroid
		where userSeq = #{userSeq} and restStatus = 0
	</select>
	
	<!-- 사업자 매장 통계 (성별) -->
	<resultMap type="java.util.HashMap" id="mapGender">
		<result column="gender"  property="GENDER"  javaType="String" />
		<result column="cnt"     property="CNT"     javaType="String" />
		<result column="percent" property="PERCENT" javaType="String" />
	</resultMap>

	<select id="restStati_Gender" resultMap="mapGender">
		select  decode( grouping(V.userGender), 0, V.userGender, '전체') as GENDER
	      	  , count(V.userGender) as CNT
	          , round( count(V.userGender) / (select count(A.userGender)
      from tbl_user A join tbl_review B
      on A.userSeq = B.userSeq
      where restSeq = #{restSeq}) * 100 ) as PERCENT
		from
		(
		  select A.userGender
      from tbl_user A join tbl_review B
      on A.userSeq = B.userSeq
      where restSeq = #{restSeq}
		) V
		group by rollup(V.userGender)
	</select>
	
	<!-- 사업자 매장 통계 (나이) -->
	<resultMap type="java.util.HashMap" id="mapAgeline">
		<result column="ageline" property="AGELINE" javaType="String" />
		<result column="cnt"	 property="CNT" 	javaType="String" />
		<result column="percent" property="PERCENT" javaType="String" />
	</resultMap>
	
	<select id="restStati_AgeLine" resultMap="mapAgeline">
		select  decode( grouping(V.AGELINE), 0, to_char(V.AGELINE), '전체') as AGELINE
	          , count(V.AGELINE) as CNT
	          , round( count(V.AGELINE) / (
             select count(trunc(extract(year from sysdate) - to_number(substr(userBirthday, 1, 4)) + 1, -1))
            from tbl_user A join tbl_review B
            on A.userSeq = B.userSeq
            where restSeq = #{restSeq}) * 100 ) as PERCENT
		from
		(
		  select trunc(extract(year from sysdate) - to_number(substr(userBirthday, 1, 4)) + 1, -1) as AGELINE
      from tbl_user A join tbl_review B
      on A.userSeq = B.userSeq
      where restSeq = #{restSeq}
		) V
		group by rollup(V.AGELINE)
	</select>
	
	<resultMap type="java.util.HashMap" id="mapReviewCount">
		<result column="regdate" property="REGDATE" javaType="String" />
		<result column="cnt"	 property="CNT" 	javaType="String" />
		<result column="percent" property="PERCENT" javaType="String" />
	</resultMap>
	
	<!-- 사업자 매장 통계 (날짜별 리뷰수) -->
	<select id="restStati_reviewCount" resultMap="mapReviewCount">
		select  decode( grouping(V.REVIEWREGDATE), 0, to_char(V.REVIEWREGDATE), '전체') as REGDATE
	          , count(V.REVIEWREGDATE) as CNT
	          , round( count(V.REVIEWREGDATE) / (
              select count(B.REVIEWREGDATE)
              from tbl_user A join tbl_review B
              on A.userSeq = B.userSeq
              where restSeq = #{restSeq}) * 100 ) as PERCENT
		from
		(
		  select B.REVIEWREGDATE
		  from tbl_user A join tbl_review B
		  on A.userSeq = B.userSeq
		  where restSeq = #{restSeq}
		) V
		group by rollup(V.REVIEWREGDATE)
	</select>
	
	<!-- 사업자 매장 통계 (총리뷰평점) -->
	<resultMap type="java.util.HashMap" id="mapReviewGrade" >
		<result column="reviewcount" property="REVIEWCOUNT" javaType="String" />
		<result column="grade"	 property="GRADE" 	javaType="Double" />
	</resultMap>
	
	<select id="restStati_ReviewGrade" resultMap="mapReviewGrade">
		select count(reviewSeq) as REVIEWCOUNT,  round(avg(sum(reviewavgscore)), 1) as GRADE
		from tbl_review
		where restSeq = #{restSeq}
		group by reviewSeq
	</select>

	<!-- 메뉴 리스트 가져오기 -->
	<resultMap type="java.util.HashMap" id="menuListMap">
		 <result column="menuSeq"	  	    property="menuSeq" 			    javaType="String" />
		 <result column="restseq"	  	    property="restseq" 			    javaType="String" />
		 <result column="menuName"	  	    property="menuName" 			javaType="String" />
		 <result column="menuContent"	  	property="menuContent" 			javaType="String" />
		 <result column="menuImg"	  	    property="menuImg" 			    javaType="String" />
		 <result column="menuPrice"	  	    property="menuPrice" 			javaType="String" />
		 <result column="menuSalePrice"	  	property="menuSalePrice" 		javaType="String" />
		 <result column="menuSort"	  	    property="menuSort" 			javaType="String" />
		 <result column="menuEvent"	  	    property="menuEvent" 			javaType="String" />
		 <result column="menuStatus"	  	property="menuStatus" 			javaType="String" />
	</resultMap>
	
	<select id="restaurant.getMenuList" parameterType="String" resultMap="menuListMap">
		select menuSeq, restSeq, menuName, menuContent, menuImg, menuPrice, menuSalePrice, menuSort, menuEvent, menuStatus
		from TBL_Restaurant_Menu
		where restSeq = #{restSeq} and menuStatus = 0
		order by menuSeq asc
	</select>
	
	<!-- 메뉴 수정하기 // SQL문 3개를 씁니다 -->
	<insert id = "restaurant.menuEditInsert" parameterType="java.util.HashMap">
		insert into TBL_Restaurant_Menu(menuSeq, restSeq, menuName, menuContent, menuImg, menuPrice, menuSalePrice, menuSort, menuEvent, menuStatus)
		values (TBL_RESTAURANT_MENUSEQ.nextval, #{restSeq}, #{menuName}, #{menuContent}, #{menuImg}, #{menuPrice}, #{menuSalePrice}, #{menuSort},
			<if test="menuEvent == null or menuEvent.equals('')">
				null
			</if>
			<if test="menuEvent != null and !menuEvent.equals('')">
				#{menuEvent}
			</if>
			, default)
	</insert>
	
	<update id = "restaurant.menuEditDelete" parameterType="java.util.HashMap">
		update TBL_Restaurant_Menu set menuStatus = 1
		where menuSeq = #{menuSeq} and restSeq = #{restSeq}
	</update>
	
	<update id = "restaurant.menuEditUpdate" parameterType="java.util.HashMap">
		update TBL_Restaurant_Menu set menuName = #{menuName}, menuContent = #{menuContent}, menuImg = #{menuImg}
									 , menuPrice = #{menuPrice}, menuSalePrice = #{menuSalePrice}, menuSort = #{menuSort}, menuEvent = 
									 <if test="menuEvent == null or menuEvent.equals('')">
						 				 null
									 </if>
									 <if test="menuEvent != null and !menuEvent.equals('')">
									 	 #{menuEvent}
									 </if>
		where menuSeq = #{menuSeq} and restSeq = #{restSeq}
	</update>
	
	<select id="restaurant.getRestThemeList" parameterType="String" resultType="String">
		select distinct(theme)
		from TBL_THEME
		where restSeq = #{restSeq}
	</select>
	
</mapper>